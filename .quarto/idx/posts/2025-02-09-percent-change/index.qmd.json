{"title":"Modeling percent change","markdown":{"yaml":{"title":"Modeling percent change","description":"Estimate percent change in longitudinal data using log-transformations and {emmeans}","author":[{"name":"Jess Graves"}],"date":"02-09-2025","execute-dir":"project","crossref":{"fig-title":"**Figure**","tbl-title":"**Table**","fig-labels":"arabic","tbl-labels":"arabic","title-delim":"."},"link-citations":true,"execute":{"echo":true,"warning":false,"message":false},"categories":["longitudinal data analysis","simulation","emmeans","lme4","R"],"image":"preview-image.png","draft":false,"bibliography":"references.bib","nocite":"@*\n","bibliographystyle":"apa","citation":true},"headingText":"Summary","containsRefs":true,"markdown":"\n\n\nThe purpose of this post is to chronicle my learnings on how to estimate percent change in longitudinal data in R using {[lme4](https://cran.r-project.org/web/packages/lme4/index.html)}[@lme4] and {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans].\n\n## Introduction\n\nIn longitudinal studies and clinical trials, we often want to be able to compare how changes from baseline differ across groups – specifically what the percent change from baseline is and how that differs across groups.\n\nIt's tempting to re-calculate the outcome itself as percent change ($Y_{\\%\\Delta} = 100*\\frac{Y_t - Y_{t-1}}{Y_{t-1}}$) and then perform the statistical test of your choice on that new outcome. However, this isn't a robust choice for a few reasons (which maybe warrants its own blog post? (In the meantime, [see this collection of statistical myths](https://discourse.datamethods.org/t/reference-collection-to-push-back-against-common-statistical-myths/1787#analyzing-change-measures-in-rcts-4), and [other references @sec-references]). But, to summarize, converting your longitudinal data to a percent change score leaves you open to bias through:\n\n-   Regression to the mean\n\n-   Mathematical coupling\n\n-   Skewness & non-normality\n\n-   Heteroscedasticity & increased variability\n\n**Log-transformations to the rescue!**\n\nIf your data are [\\>]{.underline} 0 you can reliably estimate percent change by simply taking the `log(y)` of your outcome. If your data do include 0 (but are never \\< 0) , then you can do `log(y+1)` .\n\n## Method\n\n-   Simulate some longitudinal data\n\n-   Fit a linear mixed effects model to estimate group, time, and time x group effects with subjects as random intercepts, like:\n\n    $$\n    \\begin{aligned}\n    Y_{it} = \\beta_0 +  \\beta_1 (\\text{Group}_i) + \\beta_2 (\\text{Time}_t) + \\beta_3 (\\text{Group}_i \\times \\text{Time}_t) + u_i + \\epsilon_{it}\n    \\end{aligned}\n    $$\n\n    -   $Y_{it}$= outcome for subject $i$ & time $t$\n    -   $\\beta_0$ = overall intercept\n    -   $\\beta_1$ = fixed effect for group assignment\n    -   $\\beta_2$ = fixed effect for time\n    -   $\\beta_3$ = fixed effect for interaction between time and group assignment\n    -   $u_i \\sim N(0, \\sigma_u^2)$ = random intercept for subject $i$ (accounts for individual differences)\n    -   $\\epsilon_i \\sim N(0, \\sigma_u^2)$ = residual error\n\n-   Use {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans] to do post-hoc comparisons to estimate percent changes & compare across groups\n\n## Code\n\nI'm going to use the {[simstudy](https://cran.r-project.org/web/packages/simstudy/index.html)} library to generate longitudinal data that has three timepoints across three treatment groups (Placebo, Treatment A, & Treatment B).\n\n### Set up libraries & defaults\n\n```{r}\n#| code-summary: Code for libraries & custom functions & themes\nlibrary(tidyverse)  \nlibrary(simstudy)\nlibrary(styler)\nlibrary(patchwork)\nlibrary(lme4)\nlibrary(parameters)\nlibrary(emmeans)\n\n# setting ggplot theme\nmy_theme <- theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12), \n    strip.text = element_text(size=12)\n  )\n\ntheme_set(my_theme)\n\n# Formatting p-values for significance for tables\nformat_pvalues <- function(x, stars_only = FALSE, stars = TRUE) {\n  r <- ifelse(x >= 0.05, \"\",\n    ifelse(x < 0.001, \"***\",\n      ifelse(x < 0.01 & x >= 0.001, \"**\",\n        ifelse(x >= 0.01 & x < 0.05, \"*\", \"\")\n      )\n    )\n  )\n  p <- ifelse(x < 0.001, \"<0.001\", format(round(x, 3), nsmall = 3))\n  rr <- p\n  if (stars & !stars_only) {\n    rr <- paste0(p, r)\n  }\n  if (stars_only & stars){\n    rr <- r\n  }\n  rr <- if_else(rr == \"NANA\" | is.na(rr), \"\", rr)\n  return(rr)\n}\n```\n\n### Generating the data\n\nWe're going to simulate a longitudinal dataset for a randomized control trial with 3 parallel groups with 3 total visits. I'll transform it to long format to make it easier to work with.\n\n```{r}\n#| code-summary: Code for generating data in {simstudy}\nset.seed(1111)\ndef <- defData(id = \"id\", varname = \"placeholder\", \n               formula = 0) \n# Treatment probabilities\ndef <-  defDataAdd(def, varname = \"trt\", \n                  formula =  '0.33;0.33;0.34', \n                  dist = \"categorical\")  \n# Baseline value\ndef <- defDataAdd(def, varname = \"baseline\", \n                  formula = 20, \n                  variance = 0.5) \n# Visit 1 values\ndef <- defDataAdd(def, varname = \"visit1\", \n                  formula = \"ifelse(trt == 1, baseline, \n                  ifelse(trt == 2, baseline - 0.5, baseline - 2))\",\n                  variance = .2) \n# Visit 2 values\ndef <- defDataAdd(def, varname = \"visit2\", \n                  formula = \"ifelse(trt == 1, visit1, \n                  ifelse(trt == 2, visit1 - 1, visit1 - 3))\", \n                  variance = .2) \n\n# Total N\nn <- 130 \n# Generate the data\ndd_all <- genData(n = n, dtDefs = def) %>%\n  dplyr::select(-placeholder)\n\n# Long format\ndf <- dd_all %>%\n  pivot_longer(-c(1:2), names_to='time', values_to='score') %>%\n  mutate(time=factor(time, labels=c('Baseline', 'Visit 1', 'Visit 2')), \n         trt = factor(trt, labels=c('Placebo', 'Treatment A', 'Treatment B')), \n         id=factor(id))\nhead(df)\n```\n\n#### Visualizing the data\n\nSo, plotting the data (@fig-spag), we can see in the data that Placebo group stays stable, Treatment A and B both show reductions from baseline, with Treatment B showing more reductions than Treatment A.\n\n```{r}\n#| fig-width: 7\n#| fig-height: 7\n#| label: fig-spag\n#| fig-cap: Spaghetti plot & observed means over time and treatment group \n#| code-summary: Code for spaghetti plot\nfig1 <- df %>% \n  ggplot(aes(x=time, y=score, color=trt, group=trt)) + \n  geom_line(aes(group=id), aes=0.5) + \n  stat_summary(size=0.2, \n               color='black') + \n  stat_summary(color='black', geom='line') + \n  facet_wrap(~trt) + \n  scale_color_brewer(palette='Set2') + \n  theme(legend.position='none', \n        axis.text.x=element_text(angle=25, hjust=1)) + \n  scale_y_continuous(breaks=scales::pretty_breaks(10)) + \n  labs(x='')\n\nfig2 <- df %>% \n  ggplot(aes(x=time, y=score, color=trt, group=trt)) + \n  stat_summary(size=0.2) + \n  stat_summary(geom='line') +\n  scale_color_brewer(name='', palette='Set2') + \n  scale_y_continuous(breaks=scales::pretty_breaks(10)) + \n  labs(x='') + \n  theme(legend.position='inside', \n        legend.position.inside = c(0.2, 0.3))\n\nfig1 / fig2\n```\n\n### Modeling\n\nAs promised, we'll fit a LMM to model the data and test if these reductions are significant.\n\n```{r}\n#| code-fold: false\nmodel <- lmer(log(score) ~ trt + time + trt * time + (1 | id), data = df)\n```\n\n```{r}\n#| label: fig-diagnostics\n#| fig-cap: Diagnostics of regression model show assumptions are largely met\n#| fig-width: 10\n#| fig-height: 4\n#| code-summary: Code for diagnostic plots \ndiags <- tibble(Fitted = fitted(model), Residuals = resid(model))\nfitted_resids <- diags %>%\n  ggplot(aes(x = Fitted, y = Residuals)) +\n  geom_point(alpha = 0.5, shape = 1) +\n  geom_hline(yintercept = 0) +\n  stat_smooth()\nresid_qq <- diags %>%\n  ggplot(aes(sample = Residuals)) +\n  geom_qq(shape = 1) +\n  geom_qq_line() +\n  labs(\n    x = \"Theoretical quantiles\",\n    y = \"Empirical quantiles\"\n  )\n\nfitted_resids | resid_qq\n```\n\n### Statistical tests\n\nI personally like to use {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans] to perform post-hoc statistical tests based on a fit model. Though I know there are some other great packages out there too!\n\nWuick sidebar on log transformations – recall that data are modeled on the natural-log scale. Therefore, when we calculate differences of logs, they are equivalent to the ratio of logs, which can be converted into percent changes.\n\nPercent change = $100 *\\frac{a-b}{b} = 100*(\\frac{a}{b}- 1)$\n\nRecall, rules of logs say: $ln(a) - ln(b) = ln(\\frac{a}{b})$\n\nAs a very quick and crude example to show $100*ln(\\frac{a}{b}) \\approx 100*((\\frac{a}{b}) - 1)$, let $a=110$ and $b=100$:\\\n$$\n\\begin{aligned}\n\\text{Percent change} &\\approx \\text{Ratio of logs} \\\\\n(\\frac{a}{b}) -1 &\\approx ln(\\frac{a}{b}) \\\\\n(\\frac{110}{100}) -1 &\\approx ln(\\frac{110}{100}) \\\\\n1.1-1 &\\approx ln(1.1) \\\\\n0.10 &\\approx 0.095 \\\\\n\\end{aligned}\n$$\n\n```{r}\n#| code-fold: false\nems <- emmeans(model, ~ time | trt,\n  data = df, infer = T\n)\n\n# Calculate percent change within groups\n# ln(a) - ln(b) = ln(a/b) approx a/b - 1\npct_change <- contrast(ems,\n  method = \"trt.vs.ctrl\",\n  infer = T,\n  # type = 'response' tells emmeans to present as a ratio\n  type = \"response\"\n)\n\npct_change\n```\n\nWe can interpret these ratios as: \"For a given reatment group, Visit 1 is \\[`ratio`\\] times the Baseline value\". Ratio \\< 1 means reduction, ratio \\> 1 means increase.\n\nTo convert these to percent changes, we'll just do `100*(ratio - 1)`.\n\n#### Within group changes from baseline\n\nHere is some hidden code that tidy's up the output for plotting and outputting tables – I don't want to force you to suffer it, but click to open if you want!\n\n```{r}\n#| label: fig-pct-change-line\n#| echo: true\n#| code-summary: Code for tidying the output\n\npct_change_tidy <- pct_change %>%\n  as_tibble()\n\n# Cleaning up the results for figuring & tabeling \nres <- pct_change_tidy %>%\n  # Converting ratio to % and formatting as character \n  mutate(across(c(ratio, lower.CL, upper.CL),\n    .fns = ~ format(round(100 * (.x - 1), 2), nsmall = 2),\n    .names = \"{.col}_pct_chr\"\n  )) %>%\n  # and as numeric\n  mutate(across(c(ratio, lower.CL, upper.CL),\n    .fns = ~ (100 * (.x - 1)),\n    .names = \"{.col}_pct\"\n  )) %>%\n  # Characters get concatenated so that we can reporte them more easily\n  mutate(\n    pct_change = paste0(\n      ratio_pct_chr, \" (\",\n      lower.CL_pct_chr, \", \",\n      lower.CL_pct_chr, \")\"\n    ),\n    # Adding stars for significance levels\n    stars = format_pvalues(p.value, stars_only=T),\n    p.value = format_pvalues(p.value),\n    Day = unlist(lapply(str_split(contrast, \" / \"), function(f) f[[1]]))\n  ) %>%\n  # Adding in 'Baseline' data which is 0 so that we can visualize that drop from 'Baseline'\n  full_join(., crossing(\n    contrast = \"Baseline\",\n    trt = factor(unique(df$trt)),\n    ratio_pct = 0\n  )) %>%\n  # Factoring & re-labeling\n  mutate(Day = factor(contrast,\n    levels = c(\n      \"Baseline\",\n      \"Visit 1 / Baseline\",\n      \"Visit 2 / Baseline\"\n    ),\n    labels = c(\"Baseline\", \"Visit 1\", \"Visit 2\")\n  )) %>%\n  # Only keeping the relevant columns\n  dplyr::select(Day, trt, ratio, SE, \n                contains('pct'), \n                -contains('pct_chr'), \n                stars, p.value)\n\n```\n\n```{r, include=F}\n#| label: tbl-output\n#| tbl-cap: Example rows of cleaned up output\n\nlibrary(DT)\ndatatable(res %>%\n            mutate(across(where(is.numeric),\n                          ~round(.x, 3))),\n          options = list(scrollX = TRUE,\n                         scrollY = '400px',\n            searching = FALSE,\n            lengthChange = FALSE,\n            paging = FALSE,\n            info = FALSE,\n            ordering = FALSE\n          ))\n```\n\nNow we can plot the percent reductions (@fig-pct-change) and put their significance values on the plot to show which groups have significant reductions from baseline.\n\n```{r}\n#| code-summary: Code for line plot\n# Formatting significance data for plotting\nfig_stars <- res %>%\n  dplyr::select(trt, Day, pct_change, stars) %>%\n  arrange(Day, trt) %>%\n  group_by(Day) %>%\n  # Adding position markers for adding stars to the figure\n  mutate(y.position = seq(0, 5, length = length(unique(df$trt)))) %>%\n  filter(stars != \"ns\")\n\nfig3 <- res %>%\n  ggplot(aes(x = Day, y = ratio_pct, color = trt)) +\n  geom_line(aes(group = trt),\n    position = position_dodge(width = .1)\n  ) +\n  geom_errorbar(\n    aes(\n      group = trt,\n      ymin = 100 * ((ratio - SE) - 1),\n      ymax = 100 * ((ratio + SE) - 1)\n    ),\n    width = 0,\n    position = position_dodge(width = .1), alpha = 0.5\n  ) +\n  geom_point(position = position_dodge(width = .1), size = 2) +\n  scale_color_brewer(palette='Set2') +\n  scale_y_continuous(breaks = scales::pretty_breaks(8)) +\n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.25, 0.25)\n  ) +\n  labs(color='', x = \"\", y = \"% Change (SE)\") +\n  geom_hline(yintercept = 0, linetype = 1, color = \"black\", alpha = 0.25) +\n  # Add significance stars to figure\n  geom_text(\n    data = fig_stars,\n    aes(x = Day, y = y.position, label = stars),\n    size = 5,\n    show.legend = F,\n    fontface = \"bold\"\n  ) +\n  labs(caption = \"* = p<0.05; ** = p<0.01; *** = p<0.001\")  \n```\n\n```{r}\n#| code-summary: Code for table\nlibrary(gt)\ntable <- res %>% \n  na.omit() %>% \n  dplyr::select(trt, Day, pct_change, p.value) %>%\n  rename(Treatment = trt, \n         `Comparison to baseline` = Day, \n         `% Change (95% CI)` = pct_change, \n         `p-value` = p.value) %>%\n  group_by(Treatment) %>%\n  gt()\n```\n\nGreat! Just as we suspected! Treatment A and B do show significant reductions. Does Treatment B truly work better?\n\n```{r}\n#| code-summary: Code combined table & line plot\n#| label: fig-pct-change\n#| fig-cap: Within group percent changes from baseline. \n#| fig-width: 11\n#| fig-height: 5\nwrap_table(table, panel='full', space='free_x') + fig3\n```\n\n#### Between group comparisons of changes from baseline\n\nI personally find it easier to think about differences of percents as absolute differences and not multiplicative, so if you want to get the absolute differneces in percent change across groups:\n\n1.  Fit percent changes, just like we did above, for each post-treatment time-point,\n2.  Use `regrid()` to tell {emmeans} to keep the ratio as the units we want, and\n3.  Use `contrast()` to get the differences of the percent changes (not the ratio of the percent changes)\n\n🚧 NOTE: This is how *I personally* have figured out how to do this – if you know another way please let me know!\n\nAlternatively, if you're good with ratios of ratios, you can ignore the `regrid()`! The significance of the results will be fairly similar, especially for larger N. For smaller N, you'll see some variability though.\n\n@fig-bar-group-diffs has the final results for these analyses in table + bar chart to visualize the differences.\n\n```{r}\n#| code-summary: Code of differences in percent changes across groups\n# Grab everything but the baseline timepoint\ndays <- levels(df$time)[-1]\n\n# Some list items to capture these\nday_emmeans <- day_contrast <- day_pairwise_groups <- result <- list()\nfor (i in seq_along(days)) {\n  # Group emmeans only for Baseline & Day i\n  day_emmeans[[i]] <- emmeans(model, ~ time * trt,\n    data = df,\n    at = list(time = c(\n      \"Baseline\",\n      days[i]\n    ))\n  )\n\n  # Calculating percent change relative for that Day i\n  day_contrast[[i]] <- contrast(day_emmeans[[i]],\n    method = \"trt.vs.ctrl\",\n    by = \"trt\",\n    adjust = \"none\",\n    type = \"response\"\n  )\n\n  # Regrid tells emmeans to keep the units here\n  # So that we can get absolute difference of the ratios\n  day_pairwise_groups[[i]] <- regrid(day_contrast[[i]]) %>%\n    contrast(\n      method = \"pairwise\", by = NULL,\n      infer = T\n    )\n}\n\nresults <- lapply(\n  day_pairwise_groups,\n  as_tibble\n) %>%\n  dplyr::bind_rows()\n\nhead(results)\n```\n\nWe can interpret these are the `-100*estimate` difference in the percent reductions from baseline across treatment groups. So, for row 1, we say Treatment A affords `-100*0.0224=-2.24` more percent reduction compared to Placebo.\n\n```{r}\n#| code-summary: Code to pretty up results for tables \nresults_to_table0 <- results %>%\n  mutate(\n    contrast = gsub(\"\\\\(|\\\\)\", \"\", contrast),\n    Day = map_chr(\n      str_split(contrast, \"/\"),\n      ~ .x[1]\n    ),\n    Comparison = gsub(\n      \"\\\\Visit \\\\d+/Baseline \", \"\",\n      contrast\n    ),\n    Comparison = gsub(\"-\", \"vs.\", Comparison),\n    `p-value` = format_pvalues(p.value),\n    stars = format_pvalues(p.value, stars_only = TRUE),\n    `Difference in % Change (95% CI)` =\n      paste0(\n        format(round(-100 * estimate, 2), nsmall = 2),\n        \" (\", format(round(-100 * lower.CL, 2), nsmall = 2),\n        \", \",\n        format(round(-100 * upper.CL, 2), nsmall = 2),\n        \")\"\n      )\n  )\n\nresults_to_table <- results_to_table0 %>%\n  dplyr::select(Day, Comparison, contains(\"95%\"), `p-value`) %>%\n  mutate(across(c(Day, Comparison), factor))\n\n# gt table to put in plot\ntable_grp_diffs <- results_to_table %>%\n  group_by(Day) %>%\n  gt() %>%\n  tab_footnote(\"Tukey adjustment for pairwise comparisons\") %>%\n  cols_align(align = c(\"right\"), columns = c(1, 2)) %>%\n  cols_align(align = c(\"center\"), columns = 3)\n```\n\n```{r}\n#| code-summary: Code to create significance lines for plotting group differences\nlines <- results_to_table0 %>%\n  mutate(group1 = map_chr(\n    str_split(Comparison, \" vs. \"),\n    ~ .x[1]\n  )) %>%\n  mutate(group2 = map_chr(\n    str_split(Comparison, \" vs. \"),\n    ~ .x[2]\n  )) %>%\n  dplyr::select(\n    group1, group2, Day, \n    estimate, lower.CL, stars\n  ) %>%\n  group_by(Day) %>%\n  filter(stars != \"ns\") %>%\n  mutate(y.position = seq(2, 8, length = n())) %>%\n  ungroup() %>%\n  mutate(Day = factor(Day))\n```\n\n```{r}\n#| code-summary: Code to create barplot to illustrate group differences\nlibrary(ggpubr)\nfigbar <- res %>%\n  na.omit() %>%\n  ggplot(aes(x = trt, y = ratio_pct, color = trt, fill = trt)) +\n  geom_bar(aes(group = trt),\n    stat = \"identity\", position = position_dodge(width = .1)\n  ) +\n  geom_errorbar(\n    aes(\n      group = trt,\n      ymin = 100 * ((ratio - SE) - 1),\n      ymax = 100 * ((ratio + SE) - 1)\n    ),\n    width = 0,\n    position = position_dodge(width = .1), alpha = 0.5\n  ) +\n  scale_color_brewer(name = \"\", palette = \"Set2\") +\n  scale_fill_brewer(name = \"\", palette = \"Set2\") +\n  theme_classic() +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(6),\n    limits = c(-25, 8)\n  ) +\n  theme(\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 14),\n    axis.text.x = element_text(angle = 25, hjust = 1),\n    legend.text = element_text(size = 11),\n    legend.position = \"none\",\n    legend.position.inside = c(0.1, 0.25),\n    legend.background = element_blank(),\n    strip.text = element_text(size = 12)\n  ) +\n  labs(x = \"\", y = \"% Change (SE)\") +\n  geom_hline(yintercept = 0, linetype = 1, color = \"black\", alpha = 0.25) +\n  labs(caption = \"* = p<0.05; ** = p<0.01; *** = p<0.001\") +\n  facet_wrap(~Day) +\n  # adding p-value lines from ggpubr\n  stat_pvalue_manual(\n    data = lines, label = \"stars\", xmin = \"group1\", xmax = \"group2\",\n    inherit.aes = F, tip = 0.005\n  )\n```\n\n```{r}\n#| code-summary: Code for final figure\n#| fig-width: 13\n#| fig-height: 5\n#| label: fig-bar-group-diffs\n#| fig-cap: Group differences in changes from baseline at each timepoint\n\ntbl_fig_grp_diffs <- wrap_table(table_grp_diffs,\n  panel = \"full\", space = \"free_x\"\n) + figbar\ntbl_fig_grp_diffs\n# \n# ggsave('preview-image.png', tbl_fig_grp_diffs,\n#        units='cm',\n#        width=16*2,\n#        height=6*2)\n```\n\n## References & other articles on change scores {#sec-references}\n\n::: {#refs}\n:::\n","srcMarkdownNoYaml":"\n\n## Summary\n\nThe purpose of this post is to chronicle my learnings on how to estimate percent change in longitudinal data in R using {[lme4](https://cran.r-project.org/web/packages/lme4/index.html)}[@lme4] and {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans].\n\n## Introduction\n\nIn longitudinal studies and clinical trials, we often want to be able to compare how changes from baseline differ across groups – specifically what the percent change from baseline is and how that differs across groups.\n\nIt's tempting to re-calculate the outcome itself as percent change ($Y_{\\%\\Delta} = 100*\\frac{Y_t - Y_{t-1}}{Y_{t-1}}$) and then perform the statistical test of your choice on that new outcome. However, this isn't a robust choice for a few reasons (which maybe warrants its own blog post? (In the meantime, [see this collection of statistical myths](https://discourse.datamethods.org/t/reference-collection-to-push-back-against-common-statistical-myths/1787#analyzing-change-measures-in-rcts-4), and [other references @sec-references]). But, to summarize, converting your longitudinal data to a percent change score leaves you open to bias through:\n\n-   Regression to the mean\n\n-   Mathematical coupling\n\n-   Skewness & non-normality\n\n-   Heteroscedasticity & increased variability\n\n**Log-transformations to the rescue!**\n\nIf your data are [\\>]{.underline} 0 you can reliably estimate percent change by simply taking the `log(y)` of your outcome. If your data do include 0 (but are never \\< 0) , then you can do `log(y+1)` .\n\n## Method\n\n-   Simulate some longitudinal data\n\n-   Fit a linear mixed effects model to estimate group, time, and time x group effects with subjects as random intercepts, like:\n\n    $$\n    \\begin{aligned}\n    Y_{it} = \\beta_0 +  \\beta_1 (\\text{Group}_i) + \\beta_2 (\\text{Time}_t) + \\beta_3 (\\text{Group}_i \\times \\text{Time}_t) + u_i + \\epsilon_{it}\n    \\end{aligned}\n    $$\n\n    -   $Y_{it}$= outcome for subject $i$ & time $t$\n    -   $\\beta_0$ = overall intercept\n    -   $\\beta_1$ = fixed effect for group assignment\n    -   $\\beta_2$ = fixed effect for time\n    -   $\\beta_3$ = fixed effect for interaction between time and group assignment\n    -   $u_i \\sim N(0, \\sigma_u^2)$ = random intercept for subject $i$ (accounts for individual differences)\n    -   $\\epsilon_i \\sim N(0, \\sigma_u^2)$ = residual error\n\n-   Use {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans] to do post-hoc comparisons to estimate percent changes & compare across groups\n\n## Code\n\nI'm going to use the {[simstudy](https://cran.r-project.org/web/packages/simstudy/index.html)} library to generate longitudinal data that has three timepoints across three treatment groups (Placebo, Treatment A, & Treatment B).\n\n### Set up libraries & defaults\n\n```{r}\n#| code-summary: Code for libraries & custom functions & themes\nlibrary(tidyverse)  \nlibrary(simstudy)\nlibrary(styler)\nlibrary(patchwork)\nlibrary(lme4)\nlibrary(parameters)\nlibrary(emmeans)\n\n# setting ggplot theme\nmy_theme <- theme_classic() +\n  theme(\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 14),\n    legend.text = element_text(size = 12),\n    legend.title = element_text(size = 12), \n    strip.text = element_text(size=12)\n  )\n\ntheme_set(my_theme)\n\n# Formatting p-values for significance for tables\nformat_pvalues <- function(x, stars_only = FALSE, stars = TRUE) {\n  r <- ifelse(x >= 0.05, \"\",\n    ifelse(x < 0.001, \"***\",\n      ifelse(x < 0.01 & x >= 0.001, \"**\",\n        ifelse(x >= 0.01 & x < 0.05, \"*\", \"\")\n      )\n    )\n  )\n  p <- ifelse(x < 0.001, \"<0.001\", format(round(x, 3), nsmall = 3))\n  rr <- p\n  if (stars & !stars_only) {\n    rr <- paste0(p, r)\n  }\n  if (stars_only & stars){\n    rr <- r\n  }\n  rr <- if_else(rr == \"NANA\" | is.na(rr), \"\", rr)\n  return(rr)\n}\n```\n\n### Generating the data\n\nWe're going to simulate a longitudinal dataset for a randomized control trial with 3 parallel groups with 3 total visits. I'll transform it to long format to make it easier to work with.\n\n```{r}\n#| code-summary: Code for generating data in {simstudy}\nset.seed(1111)\ndef <- defData(id = \"id\", varname = \"placeholder\", \n               formula = 0) \n# Treatment probabilities\ndef <-  defDataAdd(def, varname = \"trt\", \n                  formula =  '0.33;0.33;0.34', \n                  dist = \"categorical\")  \n# Baseline value\ndef <- defDataAdd(def, varname = \"baseline\", \n                  formula = 20, \n                  variance = 0.5) \n# Visit 1 values\ndef <- defDataAdd(def, varname = \"visit1\", \n                  formula = \"ifelse(trt == 1, baseline, \n                  ifelse(trt == 2, baseline - 0.5, baseline - 2))\",\n                  variance = .2) \n# Visit 2 values\ndef <- defDataAdd(def, varname = \"visit2\", \n                  formula = \"ifelse(trt == 1, visit1, \n                  ifelse(trt == 2, visit1 - 1, visit1 - 3))\", \n                  variance = .2) \n\n# Total N\nn <- 130 \n# Generate the data\ndd_all <- genData(n = n, dtDefs = def) %>%\n  dplyr::select(-placeholder)\n\n# Long format\ndf <- dd_all %>%\n  pivot_longer(-c(1:2), names_to='time', values_to='score') %>%\n  mutate(time=factor(time, labels=c('Baseline', 'Visit 1', 'Visit 2')), \n         trt = factor(trt, labels=c('Placebo', 'Treatment A', 'Treatment B')), \n         id=factor(id))\nhead(df)\n```\n\n#### Visualizing the data\n\nSo, plotting the data (@fig-spag), we can see in the data that Placebo group stays stable, Treatment A and B both show reductions from baseline, with Treatment B showing more reductions than Treatment A.\n\n```{r}\n#| fig-width: 7\n#| fig-height: 7\n#| label: fig-spag\n#| fig-cap: Spaghetti plot & observed means over time and treatment group \n#| code-summary: Code for spaghetti plot\nfig1 <- df %>% \n  ggplot(aes(x=time, y=score, color=trt, group=trt)) + \n  geom_line(aes(group=id), aes=0.5) + \n  stat_summary(size=0.2, \n               color='black') + \n  stat_summary(color='black', geom='line') + \n  facet_wrap(~trt) + \n  scale_color_brewer(palette='Set2') + \n  theme(legend.position='none', \n        axis.text.x=element_text(angle=25, hjust=1)) + \n  scale_y_continuous(breaks=scales::pretty_breaks(10)) + \n  labs(x='')\n\nfig2 <- df %>% \n  ggplot(aes(x=time, y=score, color=trt, group=trt)) + \n  stat_summary(size=0.2) + \n  stat_summary(geom='line') +\n  scale_color_brewer(name='', palette='Set2') + \n  scale_y_continuous(breaks=scales::pretty_breaks(10)) + \n  labs(x='') + \n  theme(legend.position='inside', \n        legend.position.inside = c(0.2, 0.3))\n\nfig1 / fig2\n```\n\n### Modeling\n\nAs promised, we'll fit a LMM to model the data and test if these reductions are significant.\n\n```{r}\n#| code-fold: false\nmodel <- lmer(log(score) ~ trt + time + trt * time + (1 | id), data = df)\n```\n\n```{r}\n#| label: fig-diagnostics\n#| fig-cap: Diagnostics of regression model show assumptions are largely met\n#| fig-width: 10\n#| fig-height: 4\n#| code-summary: Code for diagnostic plots \ndiags <- tibble(Fitted = fitted(model), Residuals = resid(model))\nfitted_resids <- diags %>%\n  ggplot(aes(x = Fitted, y = Residuals)) +\n  geom_point(alpha = 0.5, shape = 1) +\n  geom_hline(yintercept = 0) +\n  stat_smooth()\nresid_qq <- diags %>%\n  ggplot(aes(sample = Residuals)) +\n  geom_qq(shape = 1) +\n  geom_qq_line() +\n  labs(\n    x = \"Theoretical quantiles\",\n    y = \"Empirical quantiles\"\n  )\n\nfitted_resids | resid_qq\n```\n\n### Statistical tests\n\nI personally like to use {[emmeans](https://cran.r-project.org/web/packages/emmeans/index.html)}[@emmeans] to perform post-hoc statistical tests based on a fit model. Though I know there are some other great packages out there too!\n\nWuick sidebar on log transformations – recall that data are modeled on the natural-log scale. Therefore, when we calculate differences of logs, they are equivalent to the ratio of logs, which can be converted into percent changes.\n\nPercent change = $100 *\\frac{a-b}{b} = 100*(\\frac{a}{b}- 1)$\n\nRecall, rules of logs say: $ln(a) - ln(b) = ln(\\frac{a}{b})$\n\nAs a very quick and crude example to show $100*ln(\\frac{a}{b}) \\approx 100*((\\frac{a}{b}) - 1)$, let $a=110$ and $b=100$:\\\n$$\n\\begin{aligned}\n\\text{Percent change} &\\approx \\text{Ratio of logs} \\\\\n(\\frac{a}{b}) -1 &\\approx ln(\\frac{a}{b}) \\\\\n(\\frac{110}{100}) -1 &\\approx ln(\\frac{110}{100}) \\\\\n1.1-1 &\\approx ln(1.1) \\\\\n0.10 &\\approx 0.095 \\\\\n\\end{aligned}\n$$\n\n```{r}\n#| code-fold: false\nems <- emmeans(model, ~ time | trt,\n  data = df, infer = T\n)\n\n# Calculate percent change within groups\n# ln(a) - ln(b) = ln(a/b) approx a/b - 1\npct_change <- contrast(ems,\n  method = \"trt.vs.ctrl\",\n  infer = T,\n  # type = 'response' tells emmeans to present as a ratio\n  type = \"response\"\n)\n\npct_change\n```\n\nWe can interpret these ratios as: \"For a given reatment group, Visit 1 is \\[`ratio`\\] times the Baseline value\". Ratio \\< 1 means reduction, ratio \\> 1 means increase.\n\nTo convert these to percent changes, we'll just do `100*(ratio - 1)`.\n\n#### Within group changes from baseline\n\nHere is some hidden code that tidy's up the output for plotting and outputting tables – I don't want to force you to suffer it, but click to open if you want!\n\n```{r}\n#| label: fig-pct-change-line\n#| echo: true\n#| code-summary: Code for tidying the output\n\npct_change_tidy <- pct_change %>%\n  as_tibble()\n\n# Cleaning up the results for figuring & tabeling \nres <- pct_change_tidy %>%\n  # Converting ratio to % and formatting as character \n  mutate(across(c(ratio, lower.CL, upper.CL),\n    .fns = ~ format(round(100 * (.x - 1), 2), nsmall = 2),\n    .names = \"{.col}_pct_chr\"\n  )) %>%\n  # and as numeric\n  mutate(across(c(ratio, lower.CL, upper.CL),\n    .fns = ~ (100 * (.x - 1)),\n    .names = \"{.col}_pct\"\n  )) %>%\n  # Characters get concatenated so that we can reporte them more easily\n  mutate(\n    pct_change = paste0(\n      ratio_pct_chr, \" (\",\n      lower.CL_pct_chr, \", \",\n      lower.CL_pct_chr, \")\"\n    ),\n    # Adding stars for significance levels\n    stars = format_pvalues(p.value, stars_only=T),\n    p.value = format_pvalues(p.value),\n    Day = unlist(lapply(str_split(contrast, \" / \"), function(f) f[[1]]))\n  ) %>%\n  # Adding in 'Baseline' data which is 0 so that we can visualize that drop from 'Baseline'\n  full_join(., crossing(\n    contrast = \"Baseline\",\n    trt = factor(unique(df$trt)),\n    ratio_pct = 0\n  )) %>%\n  # Factoring & re-labeling\n  mutate(Day = factor(contrast,\n    levels = c(\n      \"Baseline\",\n      \"Visit 1 / Baseline\",\n      \"Visit 2 / Baseline\"\n    ),\n    labels = c(\"Baseline\", \"Visit 1\", \"Visit 2\")\n  )) %>%\n  # Only keeping the relevant columns\n  dplyr::select(Day, trt, ratio, SE, \n                contains('pct'), \n                -contains('pct_chr'), \n                stars, p.value)\n\n```\n\n```{r, include=F}\n#| label: tbl-output\n#| tbl-cap: Example rows of cleaned up output\n\nlibrary(DT)\ndatatable(res %>%\n            mutate(across(where(is.numeric),\n                          ~round(.x, 3))),\n          options = list(scrollX = TRUE,\n                         scrollY = '400px',\n            searching = FALSE,\n            lengthChange = FALSE,\n            paging = FALSE,\n            info = FALSE,\n            ordering = FALSE\n          ))\n```\n\nNow we can plot the percent reductions (@fig-pct-change) and put their significance values on the plot to show which groups have significant reductions from baseline.\n\n```{r}\n#| code-summary: Code for line plot\n# Formatting significance data for plotting\nfig_stars <- res %>%\n  dplyr::select(trt, Day, pct_change, stars) %>%\n  arrange(Day, trt) %>%\n  group_by(Day) %>%\n  # Adding position markers for adding stars to the figure\n  mutate(y.position = seq(0, 5, length = length(unique(df$trt)))) %>%\n  filter(stars != \"ns\")\n\nfig3 <- res %>%\n  ggplot(aes(x = Day, y = ratio_pct, color = trt)) +\n  geom_line(aes(group = trt),\n    position = position_dodge(width = .1)\n  ) +\n  geom_errorbar(\n    aes(\n      group = trt,\n      ymin = 100 * ((ratio - SE) - 1),\n      ymax = 100 * ((ratio + SE) - 1)\n    ),\n    width = 0,\n    position = position_dodge(width = .1), alpha = 0.5\n  ) +\n  geom_point(position = position_dodge(width = .1), size = 2) +\n  scale_color_brewer(palette='Set2') +\n  scale_y_continuous(breaks = scales::pretty_breaks(8)) +\n  theme(\n    legend.position = \"inside\",\n    legend.position.inside = c(0.25, 0.25)\n  ) +\n  labs(color='', x = \"\", y = \"% Change (SE)\") +\n  geom_hline(yintercept = 0, linetype = 1, color = \"black\", alpha = 0.25) +\n  # Add significance stars to figure\n  geom_text(\n    data = fig_stars,\n    aes(x = Day, y = y.position, label = stars),\n    size = 5,\n    show.legend = F,\n    fontface = \"bold\"\n  ) +\n  labs(caption = \"* = p<0.05; ** = p<0.01; *** = p<0.001\")  \n```\n\n```{r}\n#| code-summary: Code for table\nlibrary(gt)\ntable <- res %>% \n  na.omit() %>% \n  dplyr::select(trt, Day, pct_change, p.value) %>%\n  rename(Treatment = trt, \n         `Comparison to baseline` = Day, \n         `% Change (95% CI)` = pct_change, \n         `p-value` = p.value) %>%\n  group_by(Treatment) %>%\n  gt()\n```\n\nGreat! Just as we suspected! Treatment A and B do show significant reductions. Does Treatment B truly work better?\n\n```{r}\n#| code-summary: Code combined table & line plot\n#| label: fig-pct-change\n#| fig-cap: Within group percent changes from baseline. \n#| fig-width: 11\n#| fig-height: 5\nwrap_table(table, panel='full', space='free_x') + fig3\n```\n\n#### Between group comparisons of changes from baseline\n\nI personally find it easier to think about differences of percents as absolute differences and not multiplicative, so if you want to get the absolute differneces in percent change across groups:\n\n1.  Fit percent changes, just like we did above, for each post-treatment time-point,\n2.  Use `regrid()` to tell {emmeans} to keep the ratio as the units we want, and\n3.  Use `contrast()` to get the differences of the percent changes (not the ratio of the percent changes)\n\n🚧 NOTE: This is how *I personally* have figured out how to do this – if you know another way please let me know!\n\nAlternatively, if you're good with ratios of ratios, you can ignore the `regrid()`! The significance of the results will be fairly similar, especially for larger N. For smaller N, you'll see some variability though.\n\n@fig-bar-group-diffs has the final results for these analyses in table + bar chart to visualize the differences.\n\n```{r}\n#| code-summary: Code of differences in percent changes across groups\n# Grab everything but the baseline timepoint\ndays <- levels(df$time)[-1]\n\n# Some list items to capture these\nday_emmeans <- day_contrast <- day_pairwise_groups <- result <- list()\nfor (i in seq_along(days)) {\n  # Group emmeans only for Baseline & Day i\n  day_emmeans[[i]] <- emmeans(model, ~ time * trt,\n    data = df,\n    at = list(time = c(\n      \"Baseline\",\n      days[i]\n    ))\n  )\n\n  # Calculating percent change relative for that Day i\n  day_contrast[[i]] <- contrast(day_emmeans[[i]],\n    method = \"trt.vs.ctrl\",\n    by = \"trt\",\n    adjust = \"none\",\n    type = \"response\"\n  )\n\n  # Regrid tells emmeans to keep the units here\n  # So that we can get absolute difference of the ratios\n  day_pairwise_groups[[i]] <- regrid(day_contrast[[i]]) %>%\n    contrast(\n      method = \"pairwise\", by = NULL,\n      infer = T\n    )\n}\n\nresults <- lapply(\n  day_pairwise_groups,\n  as_tibble\n) %>%\n  dplyr::bind_rows()\n\nhead(results)\n```\n\nWe can interpret these are the `-100*estimate` difference in the percent reductions from baseline across treatment groups. So, for row 1, we say Treatment A affords `-100*0.0224=-2.24` more percent reduction compared to Placebo.\n\n```{r}\n#| code-summary: Code to pretty up results for tables \nresults_to_table0 <- results %>%\n  mutate(\n    contrast = gsub(\"\\\\(|\\\\)\", \"\", contrast),\n    Day = map_chr(\n      str_split(contrast, \"/\"),\n      ~ .x[1]\n    ),\n    Comparison = gsub(\n      \"\\\\Visit \\\\d+/Baseline \", \"\",\n      contrast\n    ),\n    Comparison = gsub(\"-\", \"vs.\", Comparison),\n    `p-value` = format_pvalues(p.value),\n    stars = format_pvalues(p.value, stars_only = TRUE),\n    `Difference in % Change (95% CI)` =\n      paste0(\n        format(round(-100 * estimate, 2), nsmall = 2),\n        \" (\", format(round(-100 * lower.CL, 2), nsmall = 2),\n        \", \",\n        format(round(-100 * upper.CL, 2), nsmall = 2),\n        \")\"\n      )\n  )\n\nresults_to_table <- results_to_table0 %>%\n  dplyr::select(Day, Comparison, contains(\"95%\"), `p-value`) %>%\n  mutate(across(c(Day, Comparison), factor))\n\n# gt table to put in plot\ntable_grp_diffs <- results_to_table %>%\n  group_by(Day) %>%\n  gt() %>%\n  tab_footnote(\"Tukey adjustment for pairwise comparisons\") %>%\n  cols_align(align = c(\"right\"), columns = c(1, 2)) %>%\n  cols_align(align = c(\"center\"), columns = 3)\n```\n\n```{r}\n#| code-summary: Code to create significance lines for plotting group differences\nlines <- results_to_table0 %>%\n  mutate(group1 = map_chr(\n    str_split(Comparison, \" vs. \"),\n    ~ .x[1]\n  )) %>%\n  mutate(group2 = map_chr(\n    str_split(Comparison, \" vs. \"),\n    ~ .x[2]\n  )) %>%\n  dplyr::select(\n    group1, group2, Day, \n    estimate, lower.CL, stars\n  ) %>%\n  group_by(Day) %>%\n  filter(stars != \"ns\") %>%\n  mutate(y.position = seq(2, 8, length = n())) %>%\n  ungroup() %>%\n  mutate(Day = factor(Day))\n```\n\n```{r}\n#| code-summary: Code to create barplot to illustrate group differences\nlibrary(ggpubr)\nfigbar <- res %>%\n  na.omit() %>%\n  ggplot(aes(x = trt, y = ratio_pct, color = trt, fill = trt)) +\n  geom_bar(aes(group = trt),\n    stat = \"identity\", position = position_dodge(width = .1)\n  ) +\n  geom_errorbar(\n    aes(\n      group = trt,\n      ymin = 100 * ((ratio - SE) - 1),\n      ymax = 100 * ((ratio + SE) - 1)\n    ),\n    width = 0,\n    position = position_dodge(width = .1), alpha = 0.5\n  ) +\n  scale_color_brewer(name = \"\", palette = \"Set2\") +\n  scale_fill_brewer(name = \"\", palette = \"Set2\") +\n  theme_classic() +\n  scale_y_continuous(\n    breaks = scales::pretty_breaks(6),\n    limits = c(-25, 8)\n  ) +\n  theme(\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 14),\n    axis.text.x = element_text(angle = 25, hjust = 1),\n    legend.text = element_text(size = 11),\n    legend.position = \"none\",\n    legend.position.inside = c(0.1, 0.25),\n    legend.background = element_blank(),\n    strip.text = element_text(size = 12)\n  ) +\n  labs(x = \"\", y = \"% Change (SE)\") +\n  geom_hline(yintercept = 0, linetype = 1, color = \"black\", alpha = 0.25) +\n  labs(caption = \"* = p<0.05; ** = p<0.01; *** = p<0.001\") +\n  facet_wrap(~Day) +\n  # adding p-value lines from ggpubr\n  stat_pvalue_manual(\n    data = lines, label = \"stars\", xmin = \"group1\", xmax = \"group2\",\n    inherit.aes = F, tip = 0.005\n  )\n```\n\n```{r}\n#| code-summary: Code for final figure\n#| fig-width: 13\n#| fig-height: 5\n#| label: fig-bar-group-diffs\n#| fig-cap: Group differences in changes from baseline at each timepoint\n\ntbl_fig_grp_diffs <- wrap_table(table_grp_diffs,\n  panel = \"full\", space = \"free_x\"\n) + figbar\ntbl_fig_grp_diffs\n# \n# ggsave('preview-image.png', tbl_fig_grp_diffs,\n#        units='cm',\n#        width=16*2,\n#        height=6*2)\n```\n\n## References & other articles on change scores {#sec-references}\n\n::: {#refs}\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../_filters/limit-authors.lua"],"css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","output-dir":"../../_site","publish":{"gh-pages":{"repo":"https://github.com/JessLGraves/jesslgraves.github.io"}},"comments":{"utterances":{"repo":"JessLGraves/post-comments"}},"theme":"cosmo","title-block-banner":true,"author":[{"name":"Jess Graves"}],"title":"Modeling percent change","description":"Estimate percent change in longitudinal data using log-transformations and {emmeans}","date":"02-09-2025","execute-dir":"project","crossref":{"fig-title":"**Figure**","tbl-title":"**Table**","fig-labels":"arabic","tbl-labels":"arabic","title-delim":"."},"link-citations":true,"categories":["longitudinal data analysis","simulation","emmeans","lme4","R"],"image":"preview-image.png","draft":false,"bibliography":["references.bib"],"nocite":"@*\n","bibliographystyle":"apa","citation":true},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}