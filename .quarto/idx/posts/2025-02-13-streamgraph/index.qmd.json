{"title":"Stream graphs are a real scream ðŸ˜±","markdown":{"yaml":{"title":"Stream graphs are a real scream ðŸ˜±","description":"Looking at horror franchises over time using {ggstream}","author":[{"name":"Jess Graves"}],"date":"02-17-2025","execute-dir":"project","crossref":{"fig-title":"**Figure**","tbl-title":"**Table**","fig-labels":"arabic","tbl-labels":"arabic","title-delim":"."},"link-citations":true,"execute":{"echo":true,"warning":false,"message":false},"categories":["data visualization","kaggle","blogging-to-learn","R"],"image":"preview-image.png","draft":false,"nocite":"@*\n","bibliographystyle":"apa","citation":true},"headingText":"Summary","containsRefs":false,"markdown":"\n\n\nI recently came across [data-to-viz](https://www.data-to-viz.com/graph/streamgraph.html)'s page on stream graphs and was inspired to learn how to use {[`ggstreams`](https://github.com/davidsjoberg/ggstream)}, [`ggplot_build()`](https://ggplot2.tidyverse.org/reference/ggplot_build.html), {[ggrepel](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html)}, and {[`colorspace`](https://colorspace.r-forge.r-project.org)}.\n\n## What's a stream graph?\n\nFrom [Wiki](https://en.wikipedia.org/wiki/Streamgraph):\n\nStreamgraph\n\n:   A streamgraph, or stream graph, is a type of [stacked area](https://en.wikipedia.org/wiki/Area_chart) graph which is displaced around a [central axis](https://en.wikipedia.org/wiki/Cartesian_coordinate_system), resulting in a flowing, organic shape.\n\nHere is a pretty example that was [made in R](https://r-graph-gallery.com/web-streamchart-with-ggstream.html):\n\n[![A gorgeous stream graph on R Graph Gallery](images/clipboard-2662324905.png){width=\"75%\"}](https://r-graph-gallery.com/web-streamchart-with-ggstream.html)\n\n## Code\n\n### Set up libraries & defaults\n\n```{r}\n#| code-summary: Code for libraries & custom functions & themes\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggstream)\nlibrary(colorspace)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(ggpubr)\nlibrary(ggExtra)\n\n# setting ggplot theme\nmy_theme <- theme_classic(base_size = 12) +\n  theme(\n    axis.title = element_text(size = 18),\n    axis.text = element_text(size = 16)\n  )\n\ntheme_set(my_theme)\n```\n\n### The dataset\n\nThe data comes from a [kaggle](https://www.kaggle.com/datasets/monkeybusiness7/horror-franchise-box-office-revenues) data set on horror movies. I'm going to be focusing on looking at trends across horror franchises over time.\n\nFirst, a tiny bit of data tidying. I'm going to:\n\n1.  Get the dates in the right format,\n2.  Drop `Friday the 13th, Nightmare on Elm Street` as a franchise because it's a cross-over with an n of 1\n3.  Level the Franchises by their earliest date of release\n\n```{r}\n#| code-fold: false\ndf <- read_csv(\"horror_movie_boxoffice.csv\") %>%\n  mutate(\n    `Release Date` = as.Date(`Release Date`, format = \"%m/%d/%Y\"),\n    Year = year(`Release Date`)\n  ) %>%\n  filter(Franchise !=\n    \"Friday the 13th, A Nightmare on Elm Street\") %>%\n  mutate(Franchise = factor(gsub(\n    \"The Texas Chainsaw Massacre\", \"TX Chainsaw Massacre\",\n    gsub(\"Street\", \"St.\", Franchise)\n  )))\n\n# Ordering franchises by their earliest release date\norder_of_release <- df %>%\n  dplyr::select(Franchise, `Release Date`) %>%\n  group_by(Franchise) %>%\n  arrange(Franchise, `Release Date`) %>%\n  slice(1) %>%\n  ungroup() %>%\n  arrange(`Release Date`)\n\nlevels_by_release <- order_of_release$Franchise\ndf$Franchise <- factor(df$Franchise, levels = levels_by_release)\n\n```\n\nThere are 20 different franchises in this dataset, with Halloween coming in first with the most films in the dataset.\n\n```{r}\n#| label: fig-bar-franchises\n#| fig-height: 4\n#| fig-width: 10\n#| fig-cap: Number of films by franchise \nfranchises <- df %>%\n  group_by(Franchise) %>%\n  tally() %>%\n  arrange(desc(n))\n\nfranchises %>%\n  mutate(Franchise = factor(Franchise, levels = franchises$Franchise)) %>%\n  ggplot(aes(x = Franchise, y = n)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 25, hjust = 1)) +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  labs(x = \"\", y = \"# of films in dataset\")\n```\n\n### ggstream()\n\n#### Tomato Meter\n\nBased on the kaggle documentation, the `Tomato Meter = \"The score given by professional critics on Rotten Tomatoes.\"`\n\nI'm going to use `ggstream()` to see what franchises are getting the highest ratings at what point in time.\n\nFor the sake of illustrating how freaking easy it is to use, I'm going to forgo any formatting for now.\n\n```{r}\n#| label: fig-stream-franchise-nakey\n#| fig-cap: Boom! One line! geom_stream, you're so easy! \n#| fig-height: 7\n#| fig-width: 13\n#| code-fold: false\n\nratings0 <- df %>%\n  ggplot(aes(\n    x = `Release Date`,\n    y = `Tomato Meter`,\n    fill = Franchise,\n    color = Franchise,\n    text = Franchise,\n    label = Franchise\n  )) +\n  geom_stream()\n\nratings0\n```\n\nAlright, going to try to make it a little more aesthetically pleasing, but using {[colorspace](https://colorspace.r-forge.r-project.org)} to choose my color palette. Because the Franchises are ordered by earliest release date, I'm going to go with a sequential color palette.\n\n```{r}\n#| code-summary: Code for setting palette\nn_franchise <- length(unique(df$Franchise))\n# Palette for streams\npal <- sequential_hcl(n_franchise, \"BluGrn\")\n# Palette for labels\npal2 <- darken(sequential_hcl(n_franchise, \"BluGrn\"), amount = 0.2, space = \"HCL\")\n\n```\n\n```{r}\n#| label: fig-palette\n#| fig-cap: Checking out what my palette will look like \n#| fig-height: 2\n#| fig-width: 7\n#| code-summary: Code for color palette figure\ncolor_data <- tibble(\n  color = factor(seq_along(pal)),\n  value = 1\n)\n\ncolor_data %>%\n  ggplot(aes(x = color, y = value, fill = color)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = pal) +\n  theme(\n    legend.position = \"none\",\n    axis.ticks = element_blank(),\n    axis.text = element_blank(),\n    axis.line = element_blank(),\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(x = \"\", y = \"\", title = \"My custom palette\")\n```\n\n```{r}\n#| code-summary: Code for setting new theme\nnew_theme <- theme_classic() +\n  theme(\n    plot.background = element_rect(fill = \"grey95\"),\n    panel.background = element_rect(fill = \"grey95\"),\n    legend.background = element_rect(fill = \"grey95\"),\n    legend.text = element_text(size = 12),\n    axis.line = element_line(color = \"grey80\"),\n    axis.ticks = element_line(color = \"grey80\"),\n    axis.text = element_text(color = \"grey50\", size = 14),\n    axis.title = element_text(color = \"grey50\", size = 18),\n    axis.line.y = element_blank(),\n    axis.text.y = element_blank()\n  )\ntheme_set(new_theme)\n```\n\nTime to apply the formatting.\n\n```{r}\n#| label: fig-stream-franchise-2\n#| fig-cap: Tomatometer score for each franchise over time with formatting\n#| fig-height: 7\n#| fig-width: 14\n#| code-summary: Code for plot\nratings <- ratings0 +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  scale_x_date(\n    breaks = \"5 year\", date_labels = \"%Y\",\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(name = \"\", values = pal) +\n  scale_color_manual(name = \"\", values = pal) +\n  theme(\n    legend.position = \"top\",\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  guides(fill = guide_legend(nrow = 3))\n\nratings\n```\n\nWith 20 different levels, the legend can be a bit difficult to visually map onto the stream colors. So, let's check out `geom_stream_label()`, which is a nice built in function that adds labels.\n\n```{r}\n#| label: fig-stream-franchise-labels\n#| fig-cap: Tomatometer score for each franchise over time with labels \n#| fig-height: 7\n#| fig-width: 13\n#| code-fold: false\nratings_labels <- ratings +\n  geom_stream_label(\n    fontface = \"bold\",\n    hjust = 0.25,\n    vjust = -0.5,\n    size = 5,\n    color = pal2\n  ) +\n  theme(legend.position = \"none\")\n\nratings_labels\n```\n\nNot too bad â€“ but I found it a bit hard to get the labels where I wanted with this many levels. And I'm not totally sure why the labels are being put where they are.\n\nTo try to get a little bit more customization in the labeling, I'm going to use `ggplot_build()` to get the data that's generated from the `geom_stream_label()` call and then modify it. (The reasons I'm calling it after `geom_stream_label()` is because the transformation into stream-space is done within the `geom_stream_label()`.)\n\n```{r}\n#| code-summary: Code to get label data for plot\n\n# Earliest release data\nearliest_release <- order_of_release %>%\n  ungroup() %>%\n  rename(label = Franchise)\n\n# Get the label data\nratings_data <- ggplot_build(ratings_labels)$data[[1]] %>%\n  as_tibble() %>%\n  rename(x0 = x)\n\n# Transforming the stream-data back to date data\nmin_x <- min(ratings_data$x0)\ntarget_date <- min(df$`Release Date`)\norigin_date <- target_date - min_x\nratings_data$x <- as.Date(ratings_data$x0, origin = origin_date)\n\n# Combining the rating data with the earliest release data\nrd <- ratings_data %>%\n  left_join(., earliest_release) %>%\n  mutate(dist_release = abs(x - `Release Date`))\n\n# The dates don't line up perfectly, so finding the x values in the label dataset are closest to the initial release date \nrd <- rd %>%\n  group_by(label) %>%\n  filter(dist_release == min(dist_release)) %>%\n  # Finding the middle of each stream\n  mutate(midpoint = median(y)) %>% \n  dplyr::select(label, x, midpoint) %>%\n  unique()\n```\n\n```{r}\n#| label: fig-streamgragph-repel-labels\n#| fig-height: 8\n#| fig-width: 14\n#| fig-caption: Tomato meter over time with geom_label_repel()\n#| code-summary: Code to get label data to add to plot \nratings_repels <- ratings +\n  geom_label_repel(rd,\n    mapping = aes(\n      x = x,\n      y = midpoint,\n      color = label,\n      label = label,\n      fill = label\n    ),\n    inherit.aes = F,\n    segment.color = NA,\n    box.padding = 0.35, # Adjust the padding inside the box\n    point.padding = 0.5, # Space between the label and the point\n    min.segment.length = 0,\n    size = 5,\n    max.overlaps = 11,\n    color = \"white\"\n  ) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = pal)\n\nratings_repels\n```\n\n#### Number of films in each franchise over time\n\nTomato Meter tells us what Franchise was getting the most ratings when. Let's switch gears to look at which Franchises dominated the horror market in terms of sheer total number of films over time. We'll be able to see where Franchises have rapid expansion or stay stable over time.\n\nI'm going to pick a different palette for fun.\n\n```{r}\n#| code-summary: Code to set base plot to add labels to\n# Palette\npal <- sequential_hcl(n_franchise, \"SunsetDark\")\n\nn_films <- df %>%\n  dplyr::select(Franchise, `Release Date`) %>%\n  group_by(Franchise) %>%\n  arrange(Franchise, `Release Date`) %>%\n  mutate(`N of films` = row_number()) %>%\n  ggplot(aes(\n    x = `Release Date`,\n    y = `N of films`,\n    fill = Franchise,\n    color = Franchise,\n    label = Franchise\n  )) +\n  geom_stream() +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  scale_x_date(\n    breaks = \"5 year\", date_labels = \"%Y\",\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(name = \"\", values = pal) +\n  scale_color_manual(name = \"\", values = pal) +\n  theme(legend.position = \"none\") +\n  guides(fill = guide_legend(nrow = 3))\n```\n\n```{r}\n#| code-summary: Code to get label data \n# Get the label data\nns_data <- ggplot_build(n_films)$data[[1]] %>%\n  as_tibble() %>%\n  rename(x0 = x)\n\nmin_x <- min(ns_data$x0)\ntarget_date <- min(df$`Release Date`)\norigin_date <- target_date - min_x\nns_data$x <- as.Date(ns_data$x0, origin = origin_date)\n\nnd <- ns_data %>%\n  left_join(., earliest_release) %>%\n  mutate(dist_release = abs(x - `Release Date`))\n\nnd <- nd %>%\n  group_by(label) %>%\n  filter(dist_release == min(dist_release)) %>%\n  mutate(midpoint = median(y)) %>%\n  dplyr::select(label, x, midpoint) %>%\n  unique()\n# \n# \n# nd2 <- nd %>%\n#   mutate(\n#     direction = if_else(midpoint < 0,\n#       min(ns_data$y),\n#       max(ns_data$y)\n#     ),\n#     dist_axis = (direction - midpoint),\n#     label_placement = midpoint + dist_axis / .8,\n#     label_placement = if_else(label_placement < 0,\n#       label_placement, -1 * label_placement\n#     )\n#   )\n```\n\n```{r}\n#| label: fig-stream-franchise-ns\n#| fig-cap: Number of films in each franchise over time with labels \n#| fig-height: 8\n#| fig-width: 13\n#| code-summary: Code for plot\nn_films_repels <- n_films +\n  geom_label_repel(nd,\n    mapping = aes(\n      x = x,\n      y = midpoint,\n      color = label,\n      label = label,\n      fill = label\n    ),\n    inherit.aes = F,\n    segment.color = NA,\n    box.padding = 0.35, # Adjust the padding inside the box\n    point.padding = 0.5, # Space between the label and the point\n    min.segment.length = 0,\n    size = 5,\n    max.overlaps = 11,\n    color = \"white\"\n  ) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = pal)\n\nn_films_repels\n\nggsave(\"preview-image.png\", n_films_repels,\n  units = \"cm\", width = 32, height = 18\n)\n```\n\nLove to see it. We can see how Nightmare on Elm Street emerging on the market in the late 80s, and Paranormal Activity exploding around the 2010s. And then there's Child's Play, consistently releasing films from the late 80s into 2020.\n\n## And, just for fun: do ratings change over time?\n\nI was curious to know if there was a general trend in ratings over time â€“ that is, are reviewers generally becoming more or less favorable to horror movies?\n\nBased on @fig-scatter, looks like no. Looks pretty flat.\n\n```{r}\n#| code-summary: Code for scatter \n#| label: fig-scatter\n#| fig-cap: Scatterplot of ratings over time\n#| fig-width: 5\n#| fig-height: 5\n# setting ggplot theme\nmy_theme <- theme_classic(base_size = 12) +\n  theme(\n    axis.title = element_text(size = 18),\n    axis.text = element_text(size = 16)\n  )\n\ntheme_set(my_theme)\n\np <- df %>%\n  dplyr::select(`Tomato Meter`, Franchise, `Release Date`) %>%\n  ggplot(aes(x = `Release Date`, y = `Tomato Meter`)) +\n  geom_point() +\n  theme(legend.position = \"none\") +\n  stat_smooth(method = \"lm\") +\n  stat_cor(\n    label.y.npc = \"top\",\n    label.x.npc = \"center\"\n  )\n\nggMarginal(p,\n  type = \"histogram\",\n  xparams = list(binwidth = 365 * 2),\n  yparams = list(binwidth = 5)\n)\n```\n\nBut once you look within Franchises (@fig-scatter-by-franchise), actually looks like most are showing some trending decrease over time. Specific yikes to Texas Chainsaw Massacre, who has tanked 50 points over it's 38 years. And Paranormal Activity & Hellraiser, who burned hot and fast, with a 50 point decline over 6-8 years (This dataset doesn't have the latest Hellraiser...).\n\n```{r}\n#| code-summary: Code for scatter with correlations\n#| label: fig-scatter-by-franchise\n#| fig-cap: Scatterplot of ratings over time for each franchise\n#| fig-width: 12\n#| fig-height: 8\ndf %>%\n  dplyr::select(`Tomato Meter`, Franchise, `Release Date`) %>%\n  ggplot(aes(\n    x = `Release Date`, y = `Tomato Meter`,\n    color = Franchise, fill = Franchise\n  )) +\n  geom_point() +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  ) +\n  stat_smooth(method = \"lm\", se = F) +\n  scale_fill_manual(values = pal) +\n  scale_color_manual(values = pal2) +\n  stat_cor(\n    label.x.npc = \"left\", label.y = 90,\n    size = 5\n  ) +\n  facet_wrap(~Franchise) +\n  scale_x_date(date_labels = \"%Y\", breaks = \"10 year\")\n```\n","srcMarkdownNoYaml":"\n\n## Summary\n\nI recently came across [data-to-viz](https://www.data-to-viz.com/graph/streamgraph.html)'s page on stream graphs and was inspired to learn how to use {[`ggstreams`](https://github.com/davidsjoberg/ggstream)}, [`ggplot_build()`](https://ggplot2.tidyverse.org/reference/ggplot_build.html), {[ggrepel](https://cran.r-project.org/web/packages/ggrepel/vignettes/ggrepel.html)}, and {[`colorspace`](https://colorspace.r-forge.r-project.org)}.\n\n## What's a stream graph?\n\nFrom [Wiki](https://en.wikipedia.org/wiki/Streamgraph):\n\nStreamgraph\n\n:   A streamgraph, or stream graph, is a type of [stacked area](https://en.wikipedia.org/wiki/Area_chart) graph which is displaced around a [central axis](https://en.wikipedia.org/wiki/Cartesian_coordinate_system), resulting in a flowing, organic shape.\n\nHere is a pretty example that was [made in R](https://r-graph-gallery.com/web-streamchart-with-ggstream.html):\n\n[![A gorgeous stream graph on R Graph Gallery](images/clipboard-2662324905.png){width=\"75%\"}](https://r-graph-gallery.com/web-streamchart-with-ggstream.html)\n\n## Code\n\n### Set up libraries & defaults\n\n```{r}\n#| code-summary: Code for libraries & custom functions & themes\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggstream)\nlibrary(colorspace)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(ggpubr)\nlibrary(ggExtra)\n\n# setting ggplot theme\nmy_theme <- theme_classic(base_size = 12) +\n  theme(\n    axis.title = element_text(size = 18),\n    axis.text = element_text(size = 16)\n  )\n\ntheme_set(my_theme)\n```\n\n### The dataset\n\nThe data comes from a [kaggle](https://www.kaggle.com/datasets/monkeybusiness7/horror-franchise-box-office-revenues) data set on horror movies. I'm going to be focusing on looking at trends across horror franchises over time.\n\nFirst, a tiny bit of data tidying. I'm going to:\n\n1.  Get the dates in the right format,\n2.  Drop `Friday the 13th, Nightmare on Elm Street` as a franchise because it's a cross-over with an n of 1\n3.  Level the Franchises by their earliest date of release\n\n```{r}\n#| code-fold: false\ndf <- read_csv(\"horror_movie_boxoffice.csv\") %>%\n  mutate(\n    `Release Date` = as.Date(`Release Date`, format = \"%m/%d/%Y\"),\n    Year = year(`Release Date`)\n  ) %>%\n  filter(Franchise !=\n    \"Friday the 13th, A Nightmare on Elm Street\") %>%\n  mutate(Franchise = factor(gsub(\n    \"The Texas Chainsaw Massacre\", \"TX Chainsaw Massacre\",\n    gsub(\"Street\", \"St.\", Franchise)\n  )))\n\n# Ordering franchises by their earliest release date\norder_of_release <- df %>%\n  dplyr::select(Franchise, `Release Date`) %>%\n  group_by(Franchise) %>%\n  arrange(Franchise, `Release Date`) %>%\n  slice(1) %>%\n  ungroup() %>%\n  arrange(`Release Date`)\n\nlevels_by_release <- order_of_release$Franchise\ndf$Franchise <- factor(df$Franchise, levels = levels_by_release)\n\n```\n\nThere are 20 different franchises in this dataset, with Halloween coming in first with the most films in the dataset.\n\n```{r}\n#| label: fig-bar-franchises\n#| fig-height: 4\n#| fig-width: 10\n#| fig-cap: Number of films by franchise \nfranchises <- df %>%\n  group_by(Franchise) %>%\n  tally() %>%\n  arrange(desc(n))\n\nfranchises %>%\n  mutate(Franchise = factor(Franchise, levels = franchises$Franchise)) %>%\n  ggplot(aes(x = Franchise, y = n)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 25, hjust = 1)) +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  labs(x = \"\", y = \"# of films in dataset\")\n```\n\n### ggstream()\n\n#### Tomato Meter\n\nBased on the kaggle documentation, the `Tomato Meter = \"The score given by professional critics on Rotten Tomatoes.\"`\n\nI'm going to use `ggstream()` to see what franchises are getting the highest ratings at what point in time.\n\nFor the sake of illustrating how freaking easy it is to use, I'm going to forgo any formatting for now.\n\n```{r}\n#| label: fig-stream-franchise-nakey\n#| fig-cap: Boom! One line! geom_stream, you're so easy! \n#| fig-height: 7\n#| fig-width: 13\n#| code-fold: false\n\nratings0 <- df %>%\n  ggplot(aes(\n    x = `Release Date`,\n    y = `Tomato Meter`,\n    fill = Franchise,\n    color = Franchise,\n    text = Franchise,\n    label = Franchise\n  )) +\n  geom_stream()\n\nratings0\n```\n\nAlright, going to try to make it a little more aesthetically pleasing, but using {[colorspace](https://colorspace.r-forge.r-project.org)} to choose my color palette. Because the Franchises are ordered by earliest release date, I'm going to go with a sequential color palette.\n\n```{r}\n#| code-summary: Code for setting palette\nn_franchise <- length(unique(df$Franchise))\n# Palette for streams\npal <- sequential_hcl(n_franchise, \"BluGrn\")\n# Palette for labels\npal2 <- darken(sequential_hcl(n_franchise, \"BluGrn\"), amount = 0.2, space = \"HCL\")\n\n```\n\n```{r}\n#| label: fig-palette\n#| fig-cap: Checking out what my palette will look like \n#| fig-height: 2\n#| fig-width: 7\n#| code-summary: Code for color palette figure\ncolor_data <- tibble(\n  color = factor(seq_along(pal)),\n  value = 1\n)\n\ncolor_data %>%\n  ggplot(aes(x = color, y = value, fill = color)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = pal) +\n  theme(\n    legend.position = \"none\",\n    axis.ticks = element_blank(),\n    axis.text = element_blank(),\n    axis.line = element_blank(),\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(x = \"\", y = \"\", title = \"My custom palette\")\n```\n\n```{r}\n#| code-summary: Code for setting new theme\nnew_theme <- theme_classic() +\n  theme(\n    plot.background = element_rect(fill = \"grey95\"),\n    panel.background = element_rect(fill = \"grey95\"),\n    legend.background = element_rect(fill = \"grey95\"),\n    legend.text = element_text(size = 12),\n    axis.line = element_line(color = \"grey80\"),\n    axis.ticks = element_line(color = \"grey80\"),\n    axis.text = element_text(color = \"grey50\", size = 14),\n    axis.title = element_text(color = \"grey50\", size = 18),\n    axis.line.y = element_blank(),\n    axis.text.y = element_blank()\n  )\ntheme_set(new_theme)\n```\n\nTime to apply the formatting.\n\n```{r}\n#| label: fig-stream-franchise-2\n#| fig-cap: Tomatometer score for each franchise over time with formatting\n#| fig-height: 7\n#| fig-width: 14\n#| code-summary: Code for plot\nratings <- ratings0 +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  scale_x_date(\n    breaks = \"5 year\", date_labels = \"%Y\",\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(name = \"\", values = pal) +\n  scale_color_manual(name = \"\", values = pal) +\n  theme(\n    legend.position = \"top\",\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  guides(fill = guide_legend(nrow = 3))\n\nratings\n```\n\nWith 20 different levels, the legend can be a bit difficult to visually map onto the stream colors. So, let's check out `geom_stream_label()`, which is a nice built in function that adds labels.\n\n```{r}\n#| label: fig-stream-franchise-labels\n#| fig-cap: Tomatometer score for each franchise over time with labels \n#| fig-height: 7\n#| fig-width: 13\n#| code-fold: false\nratings_labels <- ratings +\n  geom_stream_label(\n    fontface = \"bold\",\n    hjust = 0.25,\n    vjust = -0.5,\n    size = 5,\n    color = pal2\n  ) +\n  theme(legend.position = \"none\")\n\nratings_labels\n```\n\nNot too bad â€“ but I found it a bit hard to get the labels where I wanted with this many levels. And I'm not totally sure why the labels are being put where they are.\n\nTo try to get a little bit more customization in the labeling, I'm going to use `ggplot_build()` to get the data that's generated from the `geom_stream_label()` call and then modify it. (The reasons I'm calling it after `geom_stream_label()` is because the transformation into stream-space is done within the `geom_stream_label()`.)\n\n```{r}\n#| code-summary: Code to get label data for plot\n\n# Earliest release data\nearliest_release <- order_of_release %>%\n  ungroup() %>%\n  rename(label = Franchise)\n\n# Get the label data\nratings_data <- ggplot_build(ratings_labels)$data[[1]] %>%\n  as_tibble() %>%\n  rename(x0 = x)\n\n# Transforming the stream-data back to date data\nmin_x <- min(ratings_data$x0)\ntarget_date <- min(df$`Release Date`)\norigin_date <- target_date - min_x\nratings_data$x <- as.Date(ratings_data$x0, origin = origin_date)\n\n# Combining the rating data with the earliest release data\nrd <- ratings_data %>%\n  left_join(., earliest_release) %>%\n  mutate(dist_release = abs(x - `Release Date`))\n\n# The dates don't line up perfectly, so finding the x values in the label dataset are closest to the initial release date \nrd <- rd %>%\n  group_by(label) %>%\n  filter(dist_release == min(dist_release)) %>%\n  # Finding the middle of each stream\n  mutate(midpoint = median(y)) %>% \n  dplyr::select(label, x, midpoint) %>%\n  unique()\n```\n\n```{r}\n#| label: fig-streamgragph-repel-labels\n#| fig-height: 8\n#| fig-width: 14\n#| fig-caption: Tomato meter over time with geom_label_repel()\n#| code-summary: Code to get label data to add to plot \nratings_repels <- ratings +\n  geom_label_repel(rd,\n    mapping = aes(\n      x = x,\n      y = midpoint,\n      color = label,\n      label = label,\n      fill = label\n    ),\n    inherit.aes = F,\n    segment.color = NA,\n    box.padding = 0.35, # Adjust the padding inside the box\n    point.padding = 0.5, # Space between the label and the point\n    min.segment.length = 0,\n    size = 5,\n    max.overlaps = 11,\n    color = \"white\"\n  ) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = pal)\n\nratings_repels\n```\n\n#### Number of films in each franchise over time\n\nTomato Meter tells us what Franchise was getting the most ratings when. Let's switch gears to look at which Franchises dominated the horror market in terms of sheer total number of films over time. We'll be able to see where Franchises have rapid expansion or stay stable over time.\n\nI'm going to pick a different palette for fun.\n\n```{r}\n#| code-summary: Code to set base plot to add labels to\n# Palette\npal <- sequential_hcl(n_franchise, \"SunsetDark\")\n\nn_films <- df %>%\n  dplyr::select(Franchise, `Release Date`) %>%\n  group_by(Franchise) %>%\n  arrange(Franchise, `Release Date`) %>%\n  mutate(`N of films` = row_number()) %>%\n  ggplot(aes(\n    x = `Release Date`,\n    y = `N of films`,\n    fill = Franchise,\n    color = Franchise,\n    label = Franchise\n  )) +\n  geom_stream() +\n  scale_y_continuous(breaks = scales::pretty_breaks(10)) +\n  scale_x_date(\n    breaks = \"5 year\", date_labels = \"%Y\",\n    expand = c(0, 0)\n  ) +\n  scale_fill_manual(name = \"\", values = pal) +\n  scale_color_manual(name = \"\", values = pal) +\n  theme(legend.position = \"none\") +\n  guides(fill = guide_legend(nrow = 3))\n```\n\n```{r}\n#| code-summary: Code to get label data \n# Get the label data\nns_data <- ggplot_build(n_films)$data[[1]] %>%\n  as_tibble() %>%\n  rename(x0 = x)\n\nmin_x <- min(ns_data$x0)\ntarget_date <- min(df$`Release Date`)\norigin_date <- target_date - min_x\nns_data$x <- as.Date(ns_data$x0, origin = origin_date)\n\nnd <- ns_data %>%\n  left_join(., earliest_release) %>%\n  mutate(dist_release = abs(x - `Release Date`))\n\nnd <- nd %>%\n  group_by(label) %>%\n  filter(dist_release == min(dist_release)) %>%\n  mutate(midpoint = median(y)) %>%\n  dplyr::select(label, x, midpoint) %>%\n  unique()\n# \n# \n# nd2 <- nd %>%\n#   mutate(\n#     direction = if_else(midpoint < 0,\n#       min(ns_data$y),\n#       max(ns_data$y)\n#     ),\n#     dist_axis = (direction - midpoint),\n#     label_placement = midpoint + dist_axis / .8,\n#     label_placement = if_else(label_placement < 0,\n#       label_placement, -1 * label_placement\n#     )\n#   )\n```\n\n```{r}\n#| label: fig-stream-franchise-ns\n#| fig-cap: Number of films in each franchise over time with labels \n#| fig-height: 8\n#| fig-width: 13\n#| code-summary: Code for plot\nn_films_repels <- n_films +\n  geom_label_repel(nd,\n    mapping = aes(\n      x = x,\n      y = midpoint,\n      color = label,\n      label = label,\n      fill = label\n    ),\n    inherit.aes = F,\n    segment.color = NA,\n    box.padding = 0.35, # Adjust the padding inside the box\n    point.padding = 0.5, # Space between the label and the point\n    min.segment.length = 0,\n    size = 5,\n    max.overlaps = 11,\n    color = \"white\"\n  ) +\n  theme(legend.position = \"none\") +\n  scale_fill_manual(values = pal)\n\nn_films_repels\n\nggsave(\"preview-image.png\", n_films_repels,\n  units = \"cm\", width = 32, height = 18\n)\n```\n\nLove to see it. We can see how Nightmare on Elm Street emerging on the market in the late 80s, and Paranormal Activity exploding around the 2010s. And then there's Child's Play, consistently releasing films from the late 80s into 2020.\n\n## And, just for fun: do ratings change over time?\n\nI was curious to know if there was a general trend in ratings over time â€“ that is, are reviewers generally becoming more or less favorable to horror movies?\n\nBased on @fig-scatter, looks like no. Looks pretty flat.\n\n```{r}\n#| code-summary: Code for scatter \n#| label: fig-scatter\n#| fig-cap: Scatterplot of ratings over time\n#| fig-width: 5\n#| fig-height: 5\n# setting ggplot theme\nmy_theme <- theme_classic(base_size = 12) +\n  theme(\n    axis.title = element_text(size = 18),\n    axis.text = element_text(size = 16)\n  )\n\ntheme_set(my_theme)\n\np <- df %>%\n  dplyr::select(`Tomato Meter`, Franchise, `Release Date`) %>%\n  ggplot(aes(x = `Release Date`, y = `Tomato Meter`)) +\n  geom_point() +\n  theme(legend.position = \"none\") +\n  stat_smooth(method = \"lm\") +\n  stat_cor(\n    label.y.npc = \"top\",\n    label.x.npc = \"center\"\n  )\n\nggMarginal(p,\n  type = \"histogram\",\n  xparams = list(binwidth = 365 * 2),\n  yparams = list(binwidth = 5)\n)\n```\n\nBut once you look within Franchises (@fig-scatter-by-franchise), actually looks like most are showing some trending decrease over time. Specific yikes to Texas Chainsaw Massacre, who has tanked 50 points over it's 38 years. And Paranormal Activity & Hellraiser, who burned hot and fast, with a 50 point decline over 6-8 years (This dataset doesn't have the latest Hellraiser...).\n\n```{r}\n#| code-summary: Code for scatter with correlations\n#| label: fig-scatter-by-franchise\n#| fig-cap: Scatterplot of ratings over time for each franchise\n#| fig-width: 12\n#| fig-height: 8\ndf %>%\n  dplyr::select(`Tomato Meter`, Franchise, `Release Date`) %>%\n  ggplot(aes(\n    x = `Release Date`, y = `Tomato Meter`,\n    color = Franchise, fill = Franchise\n  )) +\n  geom_point() +\n  theme(\n    legend.position = \"none\",\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  ) +\n  stat_smooth(method = \"lm\", se = F) +\n  scale_fill_manual(values = pal) +\n  scale_color_manual(values = pal2) +\n  stat_cor(\n    label.x.npc = \"left\", label.y = 90,\n    size = 5\n  ) +\n  facet_wrap(~Franchise) +\n  scale_x_date(date_labels = \"%Y\", breaks = \"10 year\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../_filters/limit-authors.lua"],"css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"visual","output-dir":"_site","publish":{"gh-pages":{"repo":"https://github.com/JessLGraves/jesslgraves.github.io"}},"comments":{"utterances":{"repo":"JessLGraves/post-comments"}},"theme":"cosmo","title-block-banner":true,"author":[{"name":"Jess Graves"}],"title":"Stream graphs are a real scream ðŸ˜±","description":"Looking at horror franchises over time using {ggstream}","date":"02-17-2025","execute-dir":"project","crossref":{"fig-title":"**Figure**","tbl-title":"**Table**","fig-labels":"arabic","tbl-labels":"arabic","title-delim":"."},"link-citations":true,"categories":["data visualization","kaggle","blogging-to-learn","R"],"image":"preview-image.png","draft":false,"nocite":"@*\n","bibliographystyle":"apa","citation":true},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}